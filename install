#!/usr/bin/env bash

echo ""
echo "--------------------------------------------------------------------------------"
echo "   TASMANIAN INSTALL SCRIPT"
echo "--------------------------------------------------------------------------------"
echo ""

bShowHelp=0
if (( ${#@} > 0 )); then
    if [[ $1 == *"help" ]]; then
        bShowHelp=1
    fi
fi

if (( $bShowHelp == 1 )); then
    echo "Usage: ./install <install path> <matlab work folder> <optinos>"
    echo ""
    echo "       <install path>: optional"
    echo "                       the install prefix"
    echo "                       passed on -D CMAKE_INSTALL_PREFIX"
    echo "                       if missing, the script will ask for a folder"
    echo ""
    echo " <matlab work folder>: optional"
    echo "                       work folder for the matab interface"
    echo "                       if missing but you want to use matlab"
    echo "                       manually edit <install path>/matlab/tsgGetPaths.m"
    echo ""
    echo "            <options>: optional"
    echo "                       can overwrite default features, useful for testing"
    echo "               -noomp: disable OpenMP support"
    echo "              -noblas: disable BLAS support"
    echo "            -nocublas: disable Nvidia cuBlas and cuSparse support"
    echo "                -cuda: enable Nvidia CUDA kernels"
    echo "            -nopython: disable Python interface"
    echo "       -python=<path>: provide a path to the python interpreter"
    echo "             -fortran: enable Fortran interface"
    echo "            -noshared: do not build shared libraries"
    echo "            -nostatic: do not build static libraries"
    echo "              -notest: do not execute any of the tests"
    echo "               -debug: build with Debug flags"
    echo "      -cmake=<string>: pass a string directly to cmake (useful for testing)"
    echo "           -noinstall: skip the make install command, compile only"
    echo ""
    echo "  if the build process fails or you want to reset, just delete ./Build"
    exit 0
fi

########################################################################
# Check if we are in the correct folder
########################################################################
sProperFolder=1
sPWD=`pwd`
if [ ! -d "$sPWD/SparseGrids/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/DREAM/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/Testing/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/Config/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/InterfacePython/" ]; then
    sProperFolder=0
fi

if (( $sProperFolder == 0 )); then
    echo ""
    echo "ERROR: must run ./install inside the Tasmanian source folder"
    echo ""
    exit 1;
fi

########################################################################
# process options,
# Development options: -make-j calls make -j
#                      -nobashrc calls skips the .bashrc section
########################################################################
sEnableOpenMP="ON"
sEnableBLAS="ON"
sEnableCUBLAS="ON"
sEnableCUDA="OFF"
sEnablePython="ON"
sManualPythonInterp=""
sEnableFortran="OFF"
sBuildSharedLibs=""
sEnableMakeJobs=""
bEnableTests=1
sBuildType="Release"
bVerbose=0
bSkilBashrc=0
bInstall=1
sExtraCommand=""

for sOption in "$@"; do
    if [[ $sOption == "-noomp" ]]; then
        sEnableOpenMP="OFF"
    elif [[ $sOption == "-noblas" ]]; then
        sEnableBLAS="OFF"
    elif [[ $sOption == "-cuda" ]]; then
        sEnableCUDA="ON"
    elif [[ $sOption == "-nocublas" ]]; then
        sEnableCUBLAS="OFF"
    elif [[ $sOption == "-nopython" ]] || [[ $sOption == "-nospam" ]]; then
        sEnablePython="OFF"
    elif [[ $sOption == "-python="* ]]; then
        sManualPythonInterp=${sOption:8}
    elif [[ $sOption == "-fortran" ]]; then
        sEnableFortran="ON"
    elif [[ $sOption == "-noshared" ]]; then
        if [[ ! -z $sBuildSharedLibs ]]; then
            echo "ERROR: only one -noshared or -nostatic can appear in the command line"
            exit 1;
        fi
        sBuildSharedLibs="-D BUILD_SHARED_LIBS:BOOL=OFF"
    elif [[ $sOption == "-nostatic" ]]; then
        if [[ ! -z $sBuildSharedLibs ]]; then
            echo "ERROR: only one -noshared or -nostatic can appear in the command line"
            exit 1;
        fi
        sBuildSharedLibs="-D BUILD_SHARED_LIBS:BOOL=ON"
    elif [[ $sOption == "-make-j" ]]; then
        sEnableMakeJobs="-j"
    elif [[ $sOption == "-notest" ]]; then
        bEnableTests=0
    elif [[ $sOption == "-debug" ]]; then
        sBuildType="Debug"
    elif [[ $sOption == "-verbose" ]]; then
        bVerbose=1
    elif [[ $sOption == "-nobashrc" ]]; then
        bSkilBashrc=1
    elif [[ $sOption == "-noinstall" ]]; then
        bInstall=0
    elif [[ $sOption == "-cmake="* ]]; then
        sExtraCommand=${sOption:7}
    elif [[ $sOption == "-"* ]]; then
        echo "ERROR: unrecognized options $sOption"
        exit 1;
    fi
done

if [[ $sEnablePython == "OFF" ]] && [[ ! -z $sManualPythonInterp ]]; then
    echo "WARNING: using simultanously -nopython and -python=$sManualPythonInterp, -python=$sManualPythonInterp will be ignored!"
    sManualPythonInterp=""
fi

echo "Looking for cmake ..."
cmake --version || { echo "ERROR: Could not find cmake command, make sure it is included in your path."; exit 1; }

echo ""
echo ""

########################################################################
# set install path and matlab folder
########################################################################
bInstallPrefix=1
if (( ${#@} < 1 )); then
    bInstallPrefix=0
elif [[ $1 == "-"* ]]; then
    bInstallPrefix=0
fi

bMatlabWork=1
if (( $bInstallPrefix == 0 )); then
    bMatlabWork=0
elif (( ${#@} < 2 )); then
    bMatlabWork=0
elif [[ $2 == "-"* ]]; then
    bMatlabWork=0
fi

sInstallPrefix=""
if (( $bInstallPrefix == 0 )); then
    echo "Enter path to install Tasmanian"
    read -p "install path: " sInstallPrefix
else
    sInstallPrefix=$1
fi

sMatlabWork="NO_MATLAB"
sUseMatlab="OFF"
if (( $bMatlabWork == 0 )); then
    if (( $bInstallPrefix == 0 )); then
        echo "Enter path for MATLAB work file (leave empty to disable MATLAB)"
        read -p "matlab work path: " sMatlabWork
        if [[ -z $sMatlabWork ]]; then
            sUseMatlab="OFF"
            sMatlabWork="NO_MATLAB"
        else
            sUseMatlab="ON"
        fi
    fi
else
    sUseMatlab="ON"
    sMatlabWork=$2
fi

echo ""

if [[ $sUseMatlab == "ON" ]]; then
    if (( $bInstallPrefix == 0 )); then
        if [ ! -d $sMatlabWork ]; then
            echo "Matlab work folder $sMatlabWork doesn't exit"
            read -p "create the folder: (y/N) " sCreate
            if [[ -z $sCreate ]]; then
                sCreate="n"
            fi
            if [[ $sCreate == "y" ]] || [[ $sCreate == "Y" ]] || [[ $sCreate == "Yes" ]] || [[ $sCreate == "yes" ]]; then
                mkdir -p $sMatlabWork
                if [ ! $? == 0 ]; then
                    echo "ERROR: could not create folder $sMatlabWork"
                    exit 1;
                fi
                # ensure absolute path in $sMatlabWork
                sPWD=`pwd`
                cd $sMatlabWork
                sMatlabWork=`pwd`
                cd $sPWD
            else
                echo "The Matlab interace requires the Matlab work folder,"
                echo "you must create this or disable Matlab"
                exit 1;
            fi
        else
            sPWD=`pwd`
            cd $sMatlabWork
            if [ ! $? == 0 ]; then
                echo "ERROR: could not access matlab folder $sMatlabWork"
                exit 1;
            fi
            sMatlabWork=`pwd`
            cd $sPWD
        fi
    else # automatically create $sMatlabWork
        mkdir -p $sMatlabWork
        if [ ! $? == 0 ]; then
            echo "ERROR: could not create folder $sMatlabWork"
            exit 1;
        fi
        # ensure absolute path in $sMatlabWork
        sPWD=`pwd`
        cd $sMatlabWork
        sMatlabWork=`pwd`
        cd $sPWD
    fi
fi


#######################################
# final pre-Build setup message
#######################################
echo ""
echo "Installing Tasmanian with options:"
echo "   install path: $sInstallPrefix"

if [[ $sUseMatlab == "ON" ]]; then
    echo "   matlab work folder: $sMatlabWork"
fi

if [[ $sEnableOpenMP == "OFF" ]]; then
    echo "    -noomp: disable OpenMP support"
fi
if [[ $sEnableBLAS == "OFF" ]]; then
    echo "   -noblas: disable BLAS support"
fi
if [[ $sEnableCUBLAS == "OFF" ]]; then
    echo " -nocublas: disable Nvidia cuBlas and cuSparse support"
fi
if [[ $sEnableCUDA == "ON" ]]; then
    echo "     -cuda: enable Nvidia CUDA kernels"
fi
if [[ $sEnablePython == "OFF" ]]; then
    echo " -nopython: disable Python"
fi
if [[ ! -z $sManualPythonInterp ]]; then
    echo " -python=$sManualPythonInterp"
fi
if [[ $sEnableFortran == "ON" ]]; then
    echo "  -fortran: enable Fortran"
fi
if [[ $sBuildSharedLibs == "-D BUILD_SHARED_LIBS:BOOL=OFF" ]]; then
    echo " -noshared: do not build shared libraries"
fi
if [[ $sBuildSharedLibs == "-D BUILD_SHARED_LIBS:BOOL=ON" ]]; then
    echo " -nostatic: do not build static libraries"
fi
if [[ $sBuildType == "Debug" ]]; then
    echo "    -debug: build with Debug flags"
fi
if (( $bEnableTests == 0 )); then
    echo "   -notest: do not execute any of the tests"
fi
if [[ ! -z $sExtraCommand ]]; then
    echo " -cmake=$sExtraCommand"
fi

echo ""

if (( $bInstallPrefix == 0 )); then
    read -p "proceed with installation: (y/N) " sCreate
    if [[ -z $sCreate ]]; then
        sCreate="n"
    fi
    if [[ $sCreate == "y" ]] || [[ $sCreate == "Y" ]] || [[ $sCreate == "Yes" ]] || [[ $sCreate == "yes" ]]; then
        echo "Configuring..."
    else
        echo "Canceled!"
        exit 0;
    fi
else
    echo "Configuring..."
fi

echo ""

#######################################
# here we go!
#######################################
if [[ ! $sInstallPrefix == "/"* ]] && [[ ! $sInstallPrefix == "~/"* ]]; then # reinterpret relative paths
    sInstallPrefix=`pwd`/$sInstallPrefix
fi

if (( $bVerbose == 1 )); then
    set -x
fi

mkdir -p Build

cd Build

if [[ $sUseMatlab == "ON" ]]; then
    sMatlabWork="-D Tasmanian_MATLAB_WORK_FOLDER:PATH=$sMatlabWork"
else
    sMatlabWork=""
fi

if [[ ! -z $sManualPythonInterp ]]; then
    sManualPythonInterp="-D PYTHON_EXECUTABLE:FILEPATH=$sManualPythonInterp"
fi

cmake \
  -D CMAKE_BUILD_TYPE=$sBuildType \
  -D CMAKE_INSTALL_PREFIX=$sInstallPrefix \
  $sBuildSharedLibs \
  -D Tasmanian_ENABLE_OPENMP:BOOL=$sEnableOpenMP \
  -D Tasmanian_ENABLE_BLAS:BOOL=$sEnableBLAS \
  -D Tasmanian_ENABLE_MPI:BOOL=OFF \
  -D Tasmanian_ENABLE_CUBLAS:BOOL=$sEnableCUBLAS \
  -D Tasmanian_ENABLE_CUDA:BOOL=$sEnableCUDA \
  -D Tasmanian_ENABLE_PYTHON:BOOL=$sEnablePython \
  -D Tasmanian_ENABLE_FORTRAN:BOOL=$sEnableFortran \
  $sManualPythonInterp \
  $sMatlabWork \
  $sExtraCommand \
  ../

if [ ! $? == 0 ]; then
    echo "ERROR: could not execute the cmake build command!"
    exit 1;
fi

make $sEnableMakeJobs

if [ ! $? == 0 ]; then
    echo "ERROR: could not execute the 'make' command!"
    exit 1;
fi

bFailedTests=0
if (( $bEnableTests == 1 )); then
    make test || { echo "ERROR: the 'make test command' failed!"; bFailedTests=1; }
fi

if (( $bInstall == 0 )); then
    echo ""
    echo "Build successful!"
    echo ""
    echo "Skipping installation due to the -noisntall switch"
    echo ""
    exit 0;
fi

make install

if [ ! $? == 0 ]; then
    echo "ERROR: the 'make install' command failed!"
    exit 1;
fi

if (( $bEnableTests == 1 )); then
    make test_install || { echo "ERROR: the post install test failed!"; bFailedTests=1; }
fi

# write out the build log
set -x
cat $sInstallPrefix/share/Tasmanian/Tasmanian.log
# if you get here, it means things went well

#######################################
# post install, edit .bashrc
#######################################
set +x
if (( $bSkilBashrc == 0 )); then
# check if $sInstallPrefix is absolute or relative
    cd $sInstallPrefix/share/Tasmanian/
    if [ ! $? -eq 0 ] || [ ! -f ./TasmanianENVsetup.sh ]; then
        echo "Very odd! There were no previous errors but cannot find $sInstallPrefix/share/Tasmanian/TasmanianENVsetup.sh"
        echo "This must be a bug!"
        echo "At any rate, cannot automatically edit .bashrc, thus exising"
        echo ""
        exit 1;
    fi
    sConfigPath=`pwd`

    echo ""
    echo ""
    echo "Using the executable and shared library requires the following command:"
    echo ""
    echo "source $sConfigPath/TasmanianENVsetup.sh"
    echo ""
    read -p "Append the command to ~/.bashrc? (y/N)" sAppend
    if [[ $sAppend == "y" ]] || [[ $sAppend == "Y" ]] || [[ $sAppend == "Yes" ]] || [[ $sAppend == "yes" ]]; then
        echo "source $sConfigPath/TasmanianENVsetup.sh" >> ~/.bashrc
    fi
fi

if (( $bFailedTests == 1 )); then
    echo ""
    echo ""
    echo "WARNING: some of the tests failed!"
    echo "         This could be just a fluke in the seed of the random number"
    echo "         generator used by both Sparse Grids and DREAM testers."
    echo "         This could also indicate a problem with the installation."
    echo "         try testing with different seed:"
    echo "             tasgrid  -test random"
    echo "             tasdream -test random"
    exit 1;
fi

echo ""
echo "--------------------------------------------------------------------------------"
echo "   TASMANIAN INSTALL COMPLETED SUCCESSFULLY"
echo "--------------------------------------------------------------------------------"
echo ""

exit 0;
