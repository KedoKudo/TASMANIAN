cmake_minimum_required(VERSION 3.5)
project(Tasmanian_Examples)

# if given the Tasmanian install path, find_package() can be used to include the correct version of Tasmanian with all targets
find_package(Tasmanian @Tasmanian_VERSION_MAJOR@.@Tasmanian_VERSION_MINOR@.@Tasmanian_VERSION_PATCH@ PATHS "@CMAKE_INSTALL_PREFIX@")

# Alternatively, a project can skip PATHS, but "@CMAKE_INSTALL_PREFIX@/lib/" must be included in CMAKE_PREFIX_PATH
# this can be done from the command line with option -D CMAKE_PREFIX_PATH="@CMAKE_INSTALL_PREFIX@/lib/" then
# find_package(Tasmanian @Tasmanian_VERSION_MAJOR@.@Tasmanian_VERSION_MINOR@.@Tasmanian_VERSION_PATCH@)

# Alternatively, a project can directly include the exported targets with the following command
# include("@CMAKE_INSTALL_PREFIX@/lib/@CMAKE_PROJECT_NAME@/@CMAKE_PROJECT_NAME@.cmake")
# Note: find_package() calls the above include command,
#       but also checks the version and defines _shared/_static independent targets

# Tasmanian library targets always end on either _shared or _static to denote the type of library
# which can be helpful to select a specific type of library (if desired)
# Either shared or static libraries are always available, in some cases both may be present
# The find_package(Tasmanian) command will also generate interface targets without _shared/_static appendix
# Tasmanian_libsparsegrid, Tasmanian_libdream, and Tasmanian_libfortran90 TARGETs will always point to a valid library
# if both _shared and _static libraries are present, the targets above will point to the _static ones

# Tasmanian_libsparsegrid, Tasmanian_libdream, and Tasmanian_libfortran90
# are just a convinient way to tell cmake to link to whatever is available
# without having to explicitly check for _static or _shared targets

add_executable(example_sparse_grids  example_sparse_grids.cpp)
add_executable(example_dream         example_dream.cpp)

set_property(TARGET example_sparse_grids PROPERTY CXX_STANDARD 11)
set_property(TARGET example_dream PROPERTY CXX_STANDARD 11)

target_link_libraries(example_sparse_grids  Tasmanian_libsparsegrid)
target_link_libraries(example_dream         Tasmanian_libdream)

# if Fortran is available, then add the Fortran example
if (TARGET Tasmanian_libfortran90)
    enable_language(Fortran)
    add_executable(example_sparse_grids_f90  example_sparse_grids.f90)
    target_link_libraries(example_sparse_grids_f90  Tasmanian_libfortran90)
endif()

# The flag below is needed only if Tasmanian was build with cmake older than 3.9.6 and _ENABLE_OPENMP=ON
# see if the long comment further below
@Tasmanian_openmp_hack@

# OpenMP is a CXX language extension which is usually enabled with a compiler flag and a library
# the flag tells the compiler to interpret the OpenMP language directives
# the library is needed to implement some aspects of OpenMP functionality (e.g., omp_get_num_threads())
# usually, compilers take the flag and automatically link to the library without an explicit link statement
# but different compilers use different flags and OpenMP libraries
#
# CMake, prior to version 3.9.6, has no proper way to export the OpenMP library dependence
# cmake offers no way to export a link flag and
# calls to older find_package(OpenMP) do not return the library used by the compiler
#
# if Tasmanian was compiled with Tasmanian_ENABLE_OPENMP=ON and an older version of cmake
# then, find_package(Tasmanian) will create variable Tasmanian_CXX_FLAGS which is needed
# to link to the Tasmanian libraries
# BUT NOTE that this will only work if Tasmanian and the user project both call the same compiler
# using a different compiler means that you must manually link to the OpenMP library
# (usually, the library is libgom for gcc, and libiomp for clang)
#
# if newer cmake was used to build Tasmanian, then Tasmanian_CXX_FLAGS will not be defined
