/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * TASMANIAN project, https://github.com/ORNL/TASMANIAN
 * Copyright (c) 2020 Oak Ridge National Laboratory, UT-Battelle, LLC.
 * Distributed under an MIT open source license: see LICENSE for details.
 */



#ifndef SWIGFORTRAN
#define SWIGFORTRAN
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;


enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(PTR, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(PTR)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


#define SWIG_check_range(INDEX, SIZE, FUNCNAME, RETURNNULL) \
  if (!(INDEX < SIZE)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_IndexError, \
                        "index out of range", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}

#define SWIGPOLICY_std_vector_Sl_int_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_std_vector_Sl_double_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_TasGrid_TasmanianSparseGrid swig::ASSIGNMENT_DEFAULT

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 



extern "C" {

int tasmanian_ierr = 0;

}



#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}


#include <string.h>


// Stored exception message
SWIGINTERN const char* swig_last_exception_cstr = NULL;
// Retrieve error message
SWIGEXPORT const char* tasmanian_get_serr() {
  if (!swig_last_exception_cstr) {
    SWIG_store_exception("UNKNOWN", SWIG_RuntimeError,
                         "no error string was present");
  }
  return swig_last_exception_cstr;
}


#include <string>


#include <cctype>


extern "C" {
// Call this function before any new action
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl) {
  if (tasmanian_ierr != 0) {
    // Construct message; calling the error string function ensures that
    // the string is allocated if the user did something goofy like
    // manually setting the integer. Since this function is not expected to
    // be wrapped by a catch statement, it will probably terminate the
    // program.
    std::string msg("An unhandled exception occurred before a call to ");
    msg += decl;
    msg += "; ";
    std::string prev_msg = tasmanian_get_serr();
    prev_msg[0] = std::tolower(prev_msg[0]);
    msg += prev_msg;
    throw std::runtime_error(msg);
  }
}

// Save an exception to the fortran error code and string
SWIGEXPORT void SWIG_store_exception(const char *decl,
                                     int errcode,
                                     const char *msg) {
  ::tasmanian_ierr = errcode;

  static std::string last_exception_msg;
  // Save the message to a std::string first
  last_exception_msg = "In ";
  last_exception_msg += decl;
  last_exception_msg += ": ";
  last_exception_msg += msg;
  swig_last_exception_cstr = last_exception_msg.c_str();
}
}


#include <typeinfo>
#include <stdexcept>


#include <stdint.h>


#include <vector>


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}

SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,std::vector< int >::size_type index,int const &v){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int" ">::set",
                         return);
        (*self)[index] = v;
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__get(std::vector< int > *self,std::vector< int >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int" ">::get",
                         return self->front());
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_int_Sg__insert(std::vector< int > *self,std::vector< int >::size_type index,int const &v){
        SWIG_check_range(index, self->size() + 1,
                         "std::vector<""int" ">::insert",
                         return);
        self->insert(self->begin() + index, v);
      }
SWIGINTERN void std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""int" ">::remove",
                         return);
        self->erase(self->begin() + index);
      }
SWIGINTERN void std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::size_type start_index,std::vector< int >::size_type stop_index){
        SWIG_check_range(start_index, stop_index + 1,
                         "std::vector<""int" ">::remove_range",
                         return);
        SWIG_check_range(stop_index, self->size() + 1,
                         "std::vector<""int" ">::remove_range",
                         return);
        self->erase(self->begin() + start_index, self->begin() + stop_index);
      }
SWIGINTERN int &std_vector_Sl_int_Sg__front_ref(std::vector< int > *self){
      return (*self).front();
    }
SWIGINTERN int &std_vector_Sl_int_Sg__back_ref(std::vector< int > *self){
      return (*self).back();
    }
SWIGINTERN int &std_vector_Sl_int_Sg__get_ref(std::vector< int > *self,std::vector< int >::size_type index){
      SWIG_check_range(index, self->size(),
                       "std::vector<""int" ">::get_ref",
                       return self->front());
      return (*self)[index];
    }

namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destroy(SwigClassWrapper) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

SWIGINTERN SwigClassWrapper capture(SwigClassWrapper other) {
  other.cmemflags &= ~SWIG_MEM_RVALUE;
  return other;
}

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self = other;
    self.cmemflags &= ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destroy(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      *self = swig::capture(other);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destroy(*self);
  } else if (self->cptr == other.cptr) {
    /* Self-assignment: ignore */
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_free_rvalue(SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;
  if (other.cmemflags & SWIG_MEM_RVALUE 
      && other.cmemflags & SWIG_MEM_OWN) {
    /* We own *and* are being passed an expiring value */
    Policy_t::destroy(other);
  }
}


SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,std::vector< double >::size_type index,double const &v){
        SWIG_check_range(index, self->size(),
                         "std::vector<""double" ">::set",
                         return);
        (*self)[index] = v;
      }
SWIGINTERN double const &std_vector_Sl_double_Sg__get(std::vector< double > *self,std::vector< double >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""double" ">::get",
                         return self->front());
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_double_Sg__insert(std::vector< double > *self,std::vector< double >::size_type index,double const &v){
        SWIG_check_range(index, self->size() + 1,
                         "std::vector<""double" ">::insert",
                         return);
        self->insert(self->begin() + index, v);
      }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::size_type index){
        SWIG_check_range(index, self->size(),
                         "std::vector<""double" ">::remove",
                         return);
        self->erase(self->begin() + index);
      }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::size_type start_index,std::vector< double >::size_type stop_index){
        SWIG_check_range(start_index, stop_index + 1,
                         "std::vector<""double" ">::remove_range",
                         return);
        SWIG_check_range(stop_index, self->size() + 1,
                         "std::vector<""double" ">::remove_range",
                         return);
        self->erase(self->begin() + start_index, self->begin() + stop_index);
      }
SWIGINTERN double &std_vector_Sl_double_Sg__front_ref(std::vector< double > *self){
      return (*self).front();
    }
SWIGINTERN double &std_vector_Sl_double_Sg__back_ref(std::vector< double > *self){
      return (*self).back();
    }
SWIGINTERN double &std_vector_Sl_double_Sg__get_ref(std::vector< double > *self,std::vector< double >::size_type index){
      SWIG_check_range(index, self->size(),
                       "std::vector<""double" ">::get_ref",
                       return self->front());
      return (*self)[index];
    }

#include "tsgEnumerates.hpp"


#include "TasmanianSparseGrid.hpp"

extern "C" {
SWIGEXPORT SwigArrayWrapper _wrap_get_serr() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)tasmanian_get_serr();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecInt__SWIG_0() {
  SwigClassWrapper fresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecInt__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > const &", "VecInt", "std::vector< int >::vector(std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecInt__SWIG_2(long const *farg1) {
  SwigClassWrapper fresult ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int >::size_type)(*farg1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecInt__SWIG_3(long const *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  std::vector< int >::size_type arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int >::size_type)(*farg1);
  temp2 = (int)(*farg2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long _wrap_VecInt_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > const *", "VecInt", "std::vector< int >::size() const", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->size();
  fresult = (std::vector< int >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_VecInt_capacity(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > const *", "VecInt", "std::vector< int >::capacity() const", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->capacity();
  fresult = (std::vector< int >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_VecInt_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > const *", "VecInt", "std::vector< int >::empty() const", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (bool)((std::vector< int > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_VecInt_front(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > const *", "VecInt", "std::vector< int >::front() const", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (int *) &((std::vector< int > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT int _wrap_VecInt_back(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > const *", "VecInt", "std::vector< int >::back() const", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (int *) &((std::vector< int > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VecInt_reserve(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::reserve(std::vector< int >::size_type)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = (std::vector< int >::size_type)(*farg2);
  (arg1)->reserve(arg2);
}


SWIGEXPORT void _wrap_VecInt_resize__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::resize(std::vector< int >::size_type)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = (std::vector< int >::size_type)(*farg2);
  (arg1)->resize(arg2);
}


SWIGEXPORT void _wrap_VecInt_resize__SWIG_1(SwigClassWrapper *farg1, long const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::resize(std::vector< int >::size_type,int const &)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = (std::vector< int >::size_type)(*farg2);
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(int const &)*arg3);
}


SWIGEXPORT void _wrap_VecInt_push_back(SwigClassWrapper *farg1, int const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::push_back(int const &)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  temp2 = (int)(*farg2);
  arg2 = &temp2;
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT void _wrap_VecInt_pop_back(SwigClassWrapper *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::pop_back()", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  (arg1)->pop_back();
}


SWIGEXPORT void _wrap_VecInt_clear(SwigClassWrapper *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::clear()", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT void _wrap_VecInt_set(SwigClassWrapper *farg1, long const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::set(std::vector< int >::size_type,int const &)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
}


SWIGEXPORT int _wrap_VecInt_get(SwigClassWrapper *farg1, long const *farg2) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::get(std::vector< int >::size_type)", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (int *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VecInt_insert(SwigClassWrapper *farg1, long const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::insert(std::vector< int >::size_type,int const &)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (int)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_int_Sg__insert(arg1,arg2,(int const &)*arg3);
}


SWIGEXPORT void _wrap_VecInt_erase__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::erase(std::vector< int >::size_type)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = *farg2 - 1;
  std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
}


SWIGEXPORT void _wrap_VecInt_erase__SWIG_1(SwigClassWrapper *farg1, long const *farg2, long const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::size_type arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::erase(std::vector< int >::size_type,std::vector< int >::size_type)", return );
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT int * _wrap_VecInt_front_ref(SwigClassWrapper *farg1) {
  int * fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::front_ref()", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (int *) &std_vector_Sl_int_Sg__front_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int * _wrap_VecInt_back_ref(SwigClassWrapper *farg1) {
  int * fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::back_ref()", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  result = (int *) &std_vector_Sl_int_Sg__back_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int * _wrap_VecInt_get_ref(SwigClassWrapper *farg1, long const *farg2) {
  int * fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< int > *", "VecInt", "std::vector< int >::get_ref(std::vector< int >::size_type)", return 0);
  arg1 = (std::vector< int > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (int *) &std_vector_Sl_int_Sg__get_ref(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void _wrap_delete_VecInt(SwigClassWrapper *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_VecInt_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::vector< int >, SWIGPOLICY_std_vector_Sl_int_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecDbl__SWIG_0() {
  SwigClassWrapper fresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecDbl__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > const &", "VecDbl", "std::vector< double >::vector(std::vector< double > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecDbl__SWIG_2(long const *farg1) {
  SwigClassWrapper fresult ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double >::size_type)(*farg1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_VecDbl__SWIG_3(long const *farg1, double const *farg2) {
  SwigClassWrapper fresult ;
  std::vector< double >::size_type arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double >::size_type)(*farg1);
  temp2 = (double)(*farg2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long _wrap_VecDbl_size(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > const *", "VecDbl", "std::vector< double >::size() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->size();
  fresult = (std::vector< double >::size_type)(result);
  return fresult;
}


SWIGEXPORT long _wrap_VecDbl_capacity(SwigClassWrapper *farg1) {
  long fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > const *", "VecDbl", "std::vector< double >::capacity() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->capacity();
  fresult = (std::vector< double >::size_type)(result);
  return fresult;
}


SWIGEXPORT int _wrap_VecDbl_empty(SwigClassWrapper *farg1) {
  int fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > const *", "VecDbl", "std::vector< double >::empty() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (bool)((std::vector< double > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT double _wrap_VecDbl_front(SwigClassWrapper *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > const *", "VecDbl", "std::vector< double >::front() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &((std::vector< double > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT double _wrap_VecDbl_back(SwigClassWrapper *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > const *", "VecDbl", "std::vector< double >::back() const", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &((std::vector< double > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VecDbl_reserve(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::reserve(std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (std::vector< double >::size_type)(*farg2);
  (arg1)->reserve(arg2);
}


SWIGEXPORT void _wrap_VecDbl_resize__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::resize(std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (std::vector< double >::size_type)(*farg2);
  (arg1)->resize(arg2);
}


SWIGEXPORT void _wrap_VecDbl_resize__SWIG_1(SwigClassWrapper *farg1, long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::resize(std::vector< double >::size_type,double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = (std::vector< double >::size_type)(*farg2);
  temp3 = (double)(*farg3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(double const &)*arg3);
}


SWIGEXPORT void _wrap_VecDbl_push_back(SwigClassWrapper *farg1, double const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::push_back(double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  temp2 = (double)(*farg2);
  arg2 = &temp2;
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT void _wrap_VecDbl_pop_back(SwigClassWrapper *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::pop_back()", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  (arg1)->pop_back();
}


SWIGEXPORT void _wrap_VecDbl_clear(SwigClassWrapper *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::clear()", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  (arg1)->clear();
}


SWIGEXPORT void _wrap_VecDbl_set(SwigClassWrapper *farg1, long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::set(std::vector< double >::size_type,double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (double)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
}


SWIGEXPORT double _wrap_VecDbl_get(SwigClassWrapper *farg1, long const *farg2) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::get(std::vector< double >::size_type)", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (double *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void _wrap_VecDbl_insert(SwigClassWrapper *farg1, long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::insert(std::vector< double >::size_type,double const &)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  temp3 = (double)(*farg3);
  arg3 = &temp3;
  std_vector_Sl_double_Sg__insert(arg1,arg2,(double const &)*arg3);
}


SWIGEXPORT void _wrap_VecDbl_erase__SWIG_0(SwigClassWrapper *farg1, long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::erase(std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
}


SWIGEXPORT void _wrap_VecDbl_erase__SWIG_1(SwigClassWrapper *farg1, long const *farg2, long const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::size_type arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::erase(std::vector< double >::size_type,std::vector< double >::size_type)", return );
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT double * _wrap_VecDbl_front_ref(SwigClassWrapper *farg1) {
  double * fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::front_ref()", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &std_vector_Sl_double_Sg__front_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT double * _wrap_VecDbl_back_ref(SwigClassWrapper *farg1) {
  double * fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::back_ref()", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  result = (double *) &std_vector_Sl_double_Sg__back_ref(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT double * _wrap_VecDbl_get_ref(SwigClassWrapper *farg1, long const *farg2) {
  double * fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "std::vector< double > *", "VecDbl", "std::vector< double >::get_ref(std::vector< double >::size_type)", return 0);
  arg1 = (std::vector< double > *)farg1->cptr;
  arg2 = *farg2 - 1;
  result = (double *) &std_vector_Sl_double_Sg__get_ref(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void _wrap_delete_VecDbl(SwigClassWrapper *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_VecDbl_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<std::vector< double >, SWIGPOLICY_std_vector_Sl_double_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TasmanianSparseGrid__SWIG_0() {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *result = 0 ;
  
  result = (TasGrid::TasmanianSparseGrid *)new TasGrid::TasmanianSparseGrid();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TasmanianSparseGrid__SWIG_1(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = 0 ;
  TasGrid::TasmanianSparseGrid *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const &", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::TasmanianSparseGrid(TasGrid::TasmanianSparseGrid const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (TasGrid::TasmanianSparseGrid *)new TasGrid::TasmanianSparseGrid((TasGrid::TasmanianSparseGrid const &)*arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_delete_TasmanianSparseGrid(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT SwigArrayWrapper _wrap_TasmanianSparseGrid_getVersion() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)TasGrid::TasmanianSparseGrid::getVersion();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getVersionMajor() {
  int fresult ;
  int result;
  
  result = (int)TasGrid::TasmanianSparseGrid::getVersionMajor();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getVersionMinor() {
  int fresult ;
  int result;
  
  result = (int)TasGrid::TasmanianSparseGrid::getVersionMinor();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TasmanianSparseGrid_getLicense() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)TasGrid::TasmanianSparseGrid::getLicense();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TasmanianSparseGrid_getGitCommitHash() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)TasGrid::TasmanianSparseGrid::getGitCommitHash();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TasmanianSparseGrid_getCmakeCxxFlags() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)TasGrid::TasmanianSparseGrid::getCmakeCxxFlags();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isOpenMPEnabled() {
  int fresult ;
  bool result;
  
  result = (bool)TasGrid::TasmanianSparseGrid::isOpenMPEnabled();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_write__SWIG_0(SwigClassWrapper *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::write(char const *,bool) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (char *)(farg2->data);
  arg3 = (*farg3 ? true : false);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->write((char const *)arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_write__SWIG_1(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::write(char const *) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (char *)(farg2->data);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->write((char const *)arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_read__SWIG_0(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::read(char const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (char *)(farg2->data);
  (arg1)->read((char const *)arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_write__SWIG_2(SwigClassWrapper *farg1, SwigClassWrapper *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::write(std::ostream &,bool) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::ostream &", "SWIGTYPE_p_std__ostream", "TasGrid::TasmanianSparseGrid::write(std::ostream &,bool) const", return );
  arg2 = (std::ostream *)farg2->cptr;
  arg3 = (*farg3 ? true : false);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->write(*arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_write__SWIG_3(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::write(std::ostream &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::ostream &", "SWIGTYPE_p_std__ostream", "TasGrid::TasmanianSparseGrid::write(std::ostream &) const", return );
  arg2 = (std::ostream *)farg2->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->write(*arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_read__SWIG_1(SwigClassWrapper *farg1, SwigClassWrapper *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::istream *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::read(std::istream &,bool)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::istream &", "SWIGTYPE_p_std__istream", "TasGrid::TasmanianSparseGrid::read(std::istream &,bool)", return );
  arg2 = (std::istream *)farg2->cptr;
  arg3 = (*farg3 ? true : false);
  (arg1)->read(*arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_read__SWIG_2(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::istream *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::read(std::istream &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::istream &", "SWIGTYPE_p_std__istream", "TasGrid::TasmanianSparseGrid::read(std::istream &)", return );
  arg2 = (std::istream *)farg2->cptr;
  (arg1)->read(*arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7, double const *farg8, double const *farg9, SwigArrayWrapper *farg10, SwigClassWrapper *farg11) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  double arg8 ;
  double arg9 ;
  char *arg10 = (char *) 0 ;
  std::vector< int > *arg11 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *,std::vector< int > const &)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  arg8 = (double)(*farg8);
  arg9 = (double)(*farg9);
  arg10 = (char *)(farg10->data);
  SWIG_check_nonnull(farg11->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *,std::vector< int > const &)", return );
  arg11 = (std::vector< int > *)farg11->cptr;
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7,arg8,arg9,(char const *)arg10,(std::vector< int > const &)*arg11);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7, double const *farg8, double const *farg9, SwigArrayWrapper *farg10) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  double arg8 ;
  double arg9 ;
  char *arg10 = (char *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  arg8 = (double)(*farg8);
  arg9 = (double)(*farg9);
  arg10 = (char *)(farg10->data);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7,arg8,arg9,(char const *)arg10);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7, double const *farg8, double const *farg9) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  double arg8 ;
  double arg9 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  arg8 = (double)(*farg8);
  arg9 = (double)(*farg9);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7,arg8,arg9);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7, double const *farg8) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  double arg8 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  arg8 = (double)(*farg8);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7,arg8);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_5(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7, double const *farg8, double const *farg9, SwigArrayWrapper *farg10, int *farg11) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  double arg8 ;
  double arg9 ;
  char *arg10 = (char *) 0 ;
  int *arg11 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *,double,double,char const *,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  arg8 = (double)(*farg8);
  arg9 = (double)(*farg9);
  arg10 = (char *)(farg10->data);
  arg11 = (int *)(farg11);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7,arg8,arg9,(char const *)arg10,(int const *)arg11);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_6(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7, double const *farg8, double const *farg9, SwigArrayWrapper *farg10) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  double arg8 ;
  double arg9 ;
  char *arg10 = (char *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *,double,double,char const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  arg8 = (double)(*farg8);
  arg9 = (double)(*farg9);
  arg10 = (char *)(farg10->data);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7,arg8,arg9,(char const *)arg10);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_7(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7, double const *farg8, double const *farg9) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  double arg8 ;
  double arg9 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *,double,double)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  arg8 = (double)(*farg8);
  arg9 = (double)(*farg9);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7,arg8,arg9);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_8(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7, double const *farg8) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  double arg8 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *,double)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  arg8 = (double)(*farg8);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7,arg8);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_9(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeGlobalGrid__SWIG_10(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  (arg1)->makeGlobalGrid(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeSequenceGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7, SwigClassWrapper *farg8) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  std::vector< int > *arg8 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,std::vector< int > const &)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  SWIG_check_nonnull(farg8->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,std::vector< int > const &)", return );
  arg8 = (std::vector< int > *)farg8->cptr;
  (arg1)->makeSequenceGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7,(std::vector< int > const &)*arg8);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeSequenceGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  (arg1)->makeSequenceGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeSequenceGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7, int *farg8) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  arg8 = (int *)(farg8);
  (arg1)->makeSequenceGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7,(int const *)arg8);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeSequenceGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  (arg1)->makeSequenceGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeSequenceGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  (arg1)->makeSequenceGrid(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeLocalPolynomialGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, SwigClassWrapper *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  std::vector< int > *arg7 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeLocalPolynomialGrid(int,int,int,int,TasGrid::TypeOneDRule,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeLocalPolynomialGrid(int,int,int,int,TasGrid::TypeOneDRule,std::vector< int > const &)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  (arg1)->makeLocalPolynomialGrid(arg2,arg3,arg4,arg5,arg6,(std::vector< int > const &)*arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeLocalPolynomialGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  int *arg7 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeLocalPolynomialGrid(int,int,int,int,TasGrid::TypeOneDRule,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  arg7 = (int *)(farg7);
  (arg1)->makeLocalPolynomialGrid(arg2,arg3,arg4,arg5,arg6,(int const *)arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeLocalPolynomialGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TasGrid::TypeOneDRule arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeLocalPolynomialGrid(int,int,int,int,TasGrid::TypeOneDRule)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (TasGrid::TypeOneDRule)(*farg6);
  (arg1)->makeLocalPolynomialGrid(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeLocalPolynomialGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeLocalPolynomialGrid(int,int,int,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  (arg1)->makeLocalPolynomialGrid(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeLocalPolynomialGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeLocalPolynomialGrid(int,int,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  (arg1)->makeLocalPolynomialGrid(arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeWaveletGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< int > *arg6 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeWaveletGrid(int,int,int,int,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeWaveletGrid(int,int,int,int,std::vector< int > const &)", return );
  arg6 = (std::vector< int > *)farg6->cptr;
  (arg1)->makeWaveletGrid(arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeWaveletGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeWaveletGrid(int,int,int,int,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int *)(farg6);
  (arg1)->makeWaveletGrid(arg2,arg3,arg4,arg5,(int const *)arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeWaveletGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeWaveletGrid(int,int,int,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  (arg1)->makeWaveletGrid(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeWaveletGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeWaveletGrid(int,int,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  (arg1)->makeWaveletGrid(arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeFourierGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6, SwigClassWrapper *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  std::vector< int > *arg6 = 0 ;
  std::vector< int > *arg7 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg6 = (std::vector< int > *)farg6->cptr;
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg7 = (std::vector< int > *)farg7->cptr;
  (arg1)->makeFourierGrid(arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6,(std::vector< int > const &)*arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeFourierGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  std::vector< int > *arg6 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg6 = (std::vector< int > *)farg6->cptr;
  (arg1)->makeFourierGrid(arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeFourierGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int *farg6, int *farg7) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,int const *,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (int *)(farg6);
  arg7 = (int *)(farg7);
  (arg1)->makeFourierGrid(arg2,arg3,arg4,arg5,(int const *)arg6,(int const *)arg7);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeFourierGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  int *arg6 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  arg6 = (int *)(farg6);
  (arg1)->makeFourierGrid(arg2,arg3,arg4,arg5,(int const *)arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_makeFourierGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeDepth arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeDepth)(*farg5);
  (arg1)->makeFourierGrid(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_copyGrid__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2, int const *farg3, int const *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TasmanianSparseGrid *arg2 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::copyGrid(TasGrid::TasmanianSparseGrid const *,int,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TasmanianSparseGrid *)farg2->cptr;
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  (arg1)->copyGrid((TasGrid::TasmanianSparseGrid const *)arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_copyGrid__SWIG_1(SwigClassWrapper *farg1, SwigClassWrapper *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TasmanianSparseGrid *arg2 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::copyGrid(TasGrid::TasmanianSparseGrid const *,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TasmanianSparseGrid *)farg2->cptr;
  arg3 = (int)(*farg3);
  (arg1)->copyGrid((TasGrid::TasmanianSparseGrid const *)arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_copyGrid__SWIG_2(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TasmanianSparseGrid *arg2 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::copyGrid(TasGrid::TasmanianSparseGrid const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TasmanianSparseGrid *)farg2->cptr;
  (arg1)->copyGrid((TasGrid::TasmanianSparseGrid const *)arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateGlobalGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4, SwigClassWrapper *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg5 = (std::vector< int > *)farg5->cptr;
  (arg1)->updateGlobalGrid(arg2,arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateGlobalGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  std::vector< int > *arg4 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  (arg1)->updateGlobalGrid(arg2,arg3,(std::vector< int > const &)*arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateGlobalGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int *farg4, int *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,int const *,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  arg4 = (int *)(farg4);
  arg5 = (int *)(farg5);
  (arg1)->updateGlobalGrid(arg2,arg3,(int const *)arg4,(int const *)arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateGlobalGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  arg4 = (int *)(farg4);
  (arg1)->updateGlobalGrid(arg2,arg3,(int const *)arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateGlobalGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateGlobalGrid(int,TasGrid::TypeDepth)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  (arg1)->updateGlobalGrid(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateSequenceGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4, SwigClassWrapper *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg5 = (std::vector< int > *)farg5->cptr;
  (arg1)->updateSequenceGrid(arg2,arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateSequenceGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  std::vector< int > *arg4 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  (arg1)->updateSequenceGrid(arg2,arg3,(std::vector< int > const &)*arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateSequenceGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int *farg4, int *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,int const *,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  arg4 = (int *)(farg4);
  arg5 = (int *)(farg5);
  (arg1)->updateSequenceGrid(arg2,arg3,(int const *)arg4,(int const *)arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateSequenceGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  arg4 = (int *)(farg4);
  (arg1)->updateSequenceGrid(arg2,arg3,(int const *)arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateSequenceGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateSequenceGrid(int,TasGrid::TypeDepth)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  (arg1)->updateSequenceGrid(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateFourierGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4, SwigClassWrapper *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return );
  arg5 = (std::vector< int > *)farg5->cptr;
  (arg1)->updateFourierGrid(arg2,arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateFourierGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  std::vector< int > *arg4 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  (arg1)->updateFourierGrid(arg2,arg3,(std::vector< int > const &)*arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateFourierGrid__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int *farg4, int *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,int const *,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  arg4 = (int *)(farg4);
  arg5 = (int *)(farg5);
  (arg1)->updateFourierGrid(arg2,arg3,(int const *)arg4,(int const *)arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateFourierGrid__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  arg4 = (int *)(farg4);
  (arg1)->updateFourierGrid(arg2,arg3,(int const *)arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_updateFourierGrid__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  TasGrid::TypeDepth arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::updateFourierGrid(int,TasGrid::TypeDepth)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (TasGrid::TypeDepth)(*farg3);
  (arg1)->updateFourierGrid(arg2,arg3);
}


SWIGEXPORT double _wrap_TasmanianSparseGrid_getAlpha(SwigClassWrapper *farg1) {
  double fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getAlpha() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (double)((TasGrid::TasmanianSparseGrid const *)arg1)->getAlpha();
  fresult = (double)(result);
  return fresult;
}


SWIGEXPORT double _wrap_TasmanianSparseGrid_getBeta(SwigClassWrapper *farg1) {
  double fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getBeta() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (double)((TasGrid::TasmanianSparseGrid const *)arg1)->getBeta();
  fresult = (double)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getOrder(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getOrder() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getOrder();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getNumDimensions(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNumDimensions() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getNumDimensions();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getNumOutputs(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNumOutputs() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getNumOutputs();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getRule(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeOneDRule result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getRule() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (TasGrid::TypeOneDRule)((TasGrid::TasmanianSparseGrid const *)arg1)->getRule();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TasmanianSparseGrid_getCustomRuleDescription(SwigClassWrapper *farg1) {
  SwigArrayWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  char *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCustomRuleDescription() const", return SwigArrayWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (char *)((TasGrid::TasmanianSparseGrid const *)arg1)->getCustomRuleDescription();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getNumLoaded(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNumLoaded() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getNumLoaded();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getNumNeeded(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNumNeeded() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getNumNeeded();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getNumPoints(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNumPoints() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getNumPoints();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getLoadedPoints__SWIG_0(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getLoadedPoints() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getLoadedPoints();
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getNeededPoints__SWIG_0(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNeededPoints() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getNeededPoints();
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getPoints__SWIG_0(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getPoints() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getPoints();
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getQuadratureWeights__SWIG_0(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getQuadratureWeights() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getQuadratureWeights();
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getInterpolationWeights__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getInterpolationWeights(std::vector< double > const &) const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::getInterpolationWeights(std::vector< double > const &) const", return SwigClassWrapper_uninitialized());
  arg2 = (std::vector< double > *)farg2->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getInterpolationWeights((std::vector< double > const &)*arg2);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getInterpolationWeights__SWIG_1(SwigClassWrapper *farg1, double *farg2) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getInterpolationWeights(double const []) const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getInterpolationWeights((double const (*))arg2);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_loadNeededPoints__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::loadNeededPoints(std::vector< double > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::loadNeededPoints(std::vector< double > const &)", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  (arg1)->loadNeededPoints((std::vector< double > const &)*arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_loadNeededPoints__SWIG_1(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::loadNeededPoints(double const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)farg2->cptr;
  (arg1)->loadNeededPoints((double const *)arg2);
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getLoadedValues(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getLoadedValues() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (double *)((TasGrid::TasmanianSparseGrid const *)arg1)->getLoadedValues();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (0 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluate__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2, SwigClassWrapper *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluate(std::vector< double > const &,std::vector< double > &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::evaluate(std::vector< double > const &,std::vector< double > &) const", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  SWIG_check_nonnull(farg3->cptr, "std::vector< double > &", "VecDbl", "TasGrid::TasmanianSparseGrid::evaluate(std::vector< double > const &,std::vector< double > &) const", return );
  arg3 = (std::vector< double > *)farg3->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluate((std::vector< double > const &)*arg2,*arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluate__SWIG_1(SwigClassWrapper *farg1, double *farg2, double *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluate(double const [],double []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (double *)(farg3);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluate((double const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluateBatch__SWIG_1(SwigClassWrapper *farg1, double *farg2, int const *farg3, double *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  int arg3 ;
  double *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateBatch(double const [],int,double []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (int)(*farg3);
  arg4 = (double *)(farg4);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateBatch((double const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluateBatch__SWIG_2(SwigClassWrapper *farg1, SwigClassWrapper *farg2, int const *farg3, SwigClassWrapper *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  float *arg2 ;
  int arg3 ;
  float *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateBatch(float const [],int,float []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (float *)farg2->cptr;
  arg3 = (int)(*farg3);
  arg4 = (float *)farg4->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateBatch((float const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_integrate__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::integrate(std::vector< double > &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > &", "VecDbl", "TasGrid::TasmanianSparseGrid::integrate(std::vector< double > &) const", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->integrate(*arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_integrate__SWIG_1(SwigClassWrapper *farg1, double *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::integrate(double []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->integrate(arg2);
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isGlobal(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isGlobal() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isGlobal();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isSequence(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isSequence() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isSequence();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isLocalPolynomial(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isLocalPolynomial() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isLocalPolynomial();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isWavelet(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isWavelet() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isWavelet();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isFourier(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isFourier() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isFourier();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isEmpty(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isEmpty() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isEmpty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_empty(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::empty() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setDomainTransform__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2, SwigClassWrapper *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setDomainTransform(std::vector< double > const &,std::vector< double > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::setDomainTransform(std::vector< double > const &,std::vector< double > const &)", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  SWIG_check_nonnull(farg3->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::setDomainTransform(std::vector< double > const &,std::vector< double > const &)", return );
  arg3 = (std::vector< double > *)farg3->cptr;
  (arg1)->setDomainTransform((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setDomainTransform__SWIG_1(SwigClassWrapper *farg1, double *farg2, double *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setDomainTransform(double const [],double const [])", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (double *)(farg3);
  (arg1)->setDomainTransform((double const (*))arg2,(double const (*))arg3);
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isSetDomainTransfrom(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isSetDomainTransfrom() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isSetDomainTransfrom();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_clearDomainTransform(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::clearDomainTransform()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->clearDomainTransform();
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_getDomainTransform__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2, SwigClassWrapper *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getDomainTransform(std::vector< double > &,std::vector< double > &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > &", "VecDbl", "TasGrid::TasmanianSparseGrid::getDomainTransform(std::vector< double > &,std::vector< double > &) const", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  SWIG_check_nonnull(farg3->cptr, "std::vector< double > &", "VecDbl", "TasGrid::TasmanianSparseGrid::getDomainTransform(std::vector< double > &,std::vector< double > &) const", return );
  arg3 = (std::vector< double > *)farg3->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->getDomainTransform(*arg2,*arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_getDomainTransform__SWIG_1(SwigClassWrapper *farg1, double *farg2, double *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getDomainTransform(double [],double []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (double *)(farg3);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->getDomainTransform(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setConformalTransformASIN(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setConformalTransformASIN(std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::setConformalTransformASIN(std::vector< int > const &)", return );
  arg2 = (std::vector< int > *)farg2->cptr;
  (arg1)->setConformalTransformASIN((std::vector< int > const &)*arg2);
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isSetConformalTransformASIN(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isSetConformalTransformASIN() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isSetConformalTransformASIN();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_clearConformalTransform(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::clearConformalTransform()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->clearConformalTransform();
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getConformalTransformASIN(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< int > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getConformalTransformASIN() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getConformalTransformASIN();
  fresult.cptr = new (std::vector< int >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_clearLevelLimits(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::clearLevelLimits()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->clearLevelLimits();
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getLevelLimits(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< int > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getLevelLimits() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getLevelLimits();
  fresult.cptr = new (std::vector< int >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setAnisotropicRefinement__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setAnisotropicRefinement(TasGrid::TypeDepth,int,int,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::setAnisotropicRefinement(TasGrid::TypeDepth,int,int,std::vector< int > const &)", return );
  arg5 = (std::vector< int > *)farg5->cptr;
  (arg1)->setAnisotropicRefinement(arg2,arg3,arg4,(std::vector< int > const &)*arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setAnisotropicRefinement__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setAnisotropicRefinement(TasGrid::TypeDepth,int,int,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int *)(farg5);
  (arg1)->setAnisotropicRefinement(arg2,arg3,arg4,(int const *)arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setAnisotropicRefinement__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setAnisotropicRefinement(TasGrid::TypeDepth,int,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  (arg1)->setAnisotropicRefinement(arg2,arg3,arg4);
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_estimateAnisotropicCoefficients__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  int arg3 ;
  std::vector< int > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::estimateAnisotropicCoefficients(TasGrid::TypeDepth,int) const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  arg3 = (int)(*farg3);
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->estimateAnisotropicCoefficients(arg2,arg3);
  fresult.cptr = new (std::vector< int >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_0(SwigClassWrapper *farg1, double const *farg2, int const *farg3, SwigClassWrapper *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,int,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (int)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,int,std::vector< int > const &)", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  (arg1)->setSurplusRefinement(arg2,arg3,(std::vector< int > const &)*arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_1(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,int,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int *)(farg4);
  (arg1)->setSurplusRefinement(arg2,arg3,(int const *)arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_2(SwigClassWrapper *farg1, double const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  int arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (int)(*farg3);
  (arg1)->setSurplusRefinement(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_3(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5, SwigClassWrapper *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< double > *arg6 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,std::vector< int > const &,std::vector< double > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,std::vector< int > const &,std::vector< double > const &)", return );
  arg5 = (std::vector< int > *)farg5->cptr;
  SWIG_check_nonnull(farg6->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,std::vector< int > const &,std::vector< double > const &)", return );
  arg6 = (std::vector< double > *)farg6->cptr;
  (arg1)->setSurplusRefinement(arg2,arg3,arg4,(std::vector< int > const &)*arg5,(std::vector< double > const &)*arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_4(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,std::vector< int > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,std::vector< int > const &)", return );
  arg5 = (std::vector< int > *)farg5->cptr;
  (arg1)->setSurplusRefinement(arg2,arg3,arg4,(std::vector< int > const &)*arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_5(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4, int *farg5, SwigClassWrapper *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,int const *,double const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int *)(farg5);
  arg6 = (double *)farg6->cptr;
  (arg1)->setSurplusRefinement(arg2,arg3,arg4,(int const *)arg5,(double const *)arg6);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_6(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4, int *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int,int const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int *)(farg5);
  (arg1)->setSurplusRefinement(arg2,arg3,arg4,(int const *)arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_7(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  (arg1)->setSurplusRefinement(arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setSurplusRefinement__SWIG_8(SwigClassWrapper *farg1, double const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setSurplusRefinement(double,TasGrid::TypeRefinement)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  (arg1)->setSurplusRefinement(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_clearRefinement(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::clearRefinement()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->clearRefinement();
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_mergeRefinement(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::mergeRefinement()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->mergeRefinement();
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_beginConstruction(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::beginConstruction()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->beginConstruction();
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isUsingConstruction(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::isUsingConstruction() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (bool)((TasGrid::TasmanianSparseGrid const *)arg1)->isUsingConstruction();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_0(SwigClassWrapper *farg1, int const *farg2, SwigClassWrapper *farg3, SwigClassWrapper *farg4) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  SWIG_check_nonnull(farg3->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg3 = (std::vector< int > *)farg3->cptr;
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg4 = (std::vector< int > *)farg4->cptr;
  result = (arg1)->getCandidateConstructionPoints(arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_1(SwigClassWrapper *farg1, int const *farg2, SwigClassWrapper *farg3) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  SWIG_check_nonnull(farg3->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg3 = (std::vector< int > *)farg3->cptr;
  result = (arg1)->getCandidateConstructionPoints(arg2,(std::vector< int > const &)*arg3);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_2(SwigClassWrapper *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  result = (arg1)->getCandidateConstructionPoints(arg2);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3, SwigClassWrapper *farg4) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,int,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  arg3 = (int)(*farg3);
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,int,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg4 = (std::vector< int > *)farg4->cptr;
  result = (arg1)->getCandidateConstructionPoints(arg2,arg3,(std::vector< int > const &)*arg4);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_4(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeDepth arg2 ;
  int arg3 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(TasGrid::TypeDepth,int)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeDepth)(*farg2);
  arg3 = (int)(*farg3);
  result = (arg1)->getCandidateConstructionPoints(arg2,arg3);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_5(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5, SwigClassWrapper *farg6) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< double > *arg6 = 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement,int,std::vector< int > const &,std::vector< double > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement,int,std::vector< int > const &,std::vector< double > const &)", return SwigClassWrapper_uninitialized());
  arg5 = (std::vector< int > *)farg5->cptr;
  SWIG_check_nonnull(farg6->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement,int,std::vector< int > const &,std::vector< double > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< double > *)farg6->cptr;
  result = (arg1)->getCandidateConstructionPoints(arg2,arg3,arg4,(std::vector< int > const &)*arg5,(std::vector< double > const &)*arg6);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_6(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement,int,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement,int,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg5 = (std::vector< int > *)farg5->cptr;
  result = (arg1)->getCandidateConstructionPoints(arg2,arg3,arg4,(std::vector< int > const &)*arg5);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_7(SwigClassWrapper *farg1, double const *farg2, int const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  int arg4 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement,int)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  arg4 = (int)(*farg4);
  result = (arg1)->getCandidateConstructionPoints(arg2,arg3,arg4);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getCandidateConstructionPoints__SWIG_8(SwigClassWrapper *farg1, double const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  TasGrid::TypeRefinement arg3 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getCandidateConstructionPoints(double,TasGrid::TypeRefinement)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (TasGrid::TypeRefinement)(*farg3);
  result = (arg1)->getCandidateConstructionPoints(arg2,arg3);
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_loadConstructedPoints__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2, SwigClassWrapper *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::loadConstructedPoints(std::vector< double > const &,std::vector< double > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::loadConstructedPoints(std::vector< double > const &,std::vector< double > const &)", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  SWIG_check_nonnull(farg3->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::loadConstructedPoints(std::vector< double > const &,std::vector< double > const &)", return );
  arg3 = (std::vector< double > *)farg3->cptr;
  (arg1)->loadConstructedPoints((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_loadConstructedPoints__SWIG_1(SwigClassWrapper *farg1, double *farg2, int const *farg3, double *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  int arg3 ;
  double *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::loadConstructedPoints(double const [],int,double const [])", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (int)(*farg3);
  arg4 = (double *)(farg4);
  (arg1)->loadConstructedPoints((double const (*))arg2,arg3,(double const (*))arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_finishConstruction(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::finishConstruction()", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  (arg1)->finishConstruction();
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getHierarchicalCoefficients(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getHierarchicalCoefficients() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (double *)((TasGrid::TasmanianSparseGrid const *)arg1)->getHierarchicalCoefficients();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (0 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setHierarchicalCoefficients__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setHierarchicalCoefficients(std::vector< double > const &)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::setHierarchicalCoefficients(std::vector< double > const &)", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  (arg1)->setHierarchicalCoefficients((std::vector< double > const &)*arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setHierarchicalCoefficients__SWIG_1(SwigClassWrapper *farg1, double *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setHierarchicalCoefficients(double const [])", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  (arg1)->setHierarchicalCoefficients((double const (*))arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluateHierarchicalFunctions__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2, SwigClassWrapper *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateHierarchicalFunctions(std::vector< double > const &,std::vector< double > &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::evaluateHierarchicalFunctions(std::vector< double > const &,std::vector< double > &) const", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  SWIG_check_nonnull(farg3->cptr, "std::vector< double > &", "VecDbl", "TasGrid::TasmanianSparseGrid::evaluateHierarchicalFunctions(std::vector< double > const &,std::vector< double > &) const", return );
  arg3 = (std::vector< double > *)farg3->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateHierarchicalFunctions((std::vector< double > const &)*arg2,*arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluateHierarchicalFunctions__SWIG_2(SwigClassWrapper *farg1, double *farg2, int const *farg3, double *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  int arg3 ;
  double *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateHierarchicalFunctions(double const [],int,double []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (int)(*farg3);
  arg4 = (double *)(farg4);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateHierarchicalFunctions((double const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluateSparseHierarchicalFunctions(SwigClassWrapper *farg1, SwigClassWrapper *farg2, SwigClassWrapper *farg3, SwigClassWrapper *farg4, SwigClassWrapper *farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctions(std::vector< double > const &,std::vector< int > &,std::vector< int > &,std::vector< double > &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::vector< double > const &", "VecDbl", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctions(std::vector< double > const &,std::vector< int > &,std::vector< int > &,std::vector< double > &) const", return );
  arg2 = (std::vector< double > *)farg2->cptr;
  SWIG_check_nonnull(farg3->cptr, "std::vector< int > &", "VecInt", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctions(std::vector< double > const &,std::vector< int > &,std::vector< int > &,std::vector< double > &) const", return );
  arg3 = (std::vector< int > *)farg3->cptr;
  SWIG_check_nonnull(farg4->cptr, "std::vector< int > &", "VecInt", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctions(std::vector< double > const &,std::vector< int > &,std::vector< int > &,std::vector< double > &) const", return );
  arg4 = (std::vector< int > *)farg4->cptr;
  SWIG_check_nonnull(farg5->cptr, "std::vector< double > &", "VecDbl", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctions(std::vector< double > const &,std::vector< int > &,std::vector< int > &,std::vector< double > &) const", return );
  arg5 = (std::vector< double > *)farg5->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateSparseHierarchicalFunctions((std::vector< double > const &)*arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getHierarchicalSupport(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getHierarchicalSupport() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getHierarchicalSupport();
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_integrateHierarchicalFunctions__SWIG_0(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::vector< double > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::integrateHierarchicalFunctions() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->integrateHierarchicalFunctions();
  fresult.cptr = new (std::vector< double >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getGlobalPolynomialSpace(SwigClassWrapper *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool arg2 ;
  std::vector< int > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getGlobalPolynomialSpace(bool) const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (*farg2 ? true : false);
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getGlobalPolynomialSpace(arg2);
  fresult.cptr = new (std::vector< int >)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_printStats__SWIG_0(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::printStats(std::ostream &) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  SWIG_check_nonnull(farg2->cptr, "std::ostream &", "SWIGTYPE_p_std__ostream", "TasGrid::TasmanianSparseGrid::printStats(std::ostream &) const", return );
  arg2 = (std::ostream *)farg2->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->printStats(*arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_printStats__SWIG_1(SwigClassWrapper *farg1) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::printStats() const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  ((TasGrid::TasmanianSparseGrid const *)arg1)->printStats();
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_enableAcceleration__SWIG_0(SwigClassWrapper *farg1, int const *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeAcceleration arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::enableAcceleration(TasGrid::TypeAcceleration)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeAcceleration)(*farg2);
  (arg1)->enableAcceleration(arg2);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_enableAcceleration__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, void const **farg4, void const **farg5) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeAcceleration arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::enableAcceleration(TasGrid::TypeAcceleration,int,void *,void *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeAcceleration)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (void *)(*farg4);
  arg5 = (void *)(*farg5);
  (arg1)->enableAcceleration(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_enableAcceleration__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, void const **farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeAcceleration arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::enableAcceleration(TasGrid::TypeAcceleration,int,void *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeAcceleration)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (void *)(*farg4);
  (arg1)->enableAcceleration(arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_enableAcceleration__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeAcceleration arg2 ;
  int arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::enableAcceleration(TasGrid::TypeAcceleration,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (TasGrid::TypeAcceleration)(*farg2);
  arg3 = (int)(*farg3);
  (arg1)->enableAcceleration(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_favorSparseAcceleration(SwigClassWrapper *farg1, int const *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  bool arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::favorSparseAcceleration(bool)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (*farg2 ? true : false);
  (arg1)->favorSparseAcceleration(arg2);
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getAccelerationType(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TypeAcceleration result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getAccelerationType() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (TasGrid::TypeAcceleration)((TasGrid::TasmanianSparseGrid const *)arg1)->getAccelerationType();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_isAccelerationAvailable(int const *farg1) {
  int fresult ;
  TasGrid::TypeAcceleration arg1 ;
  bool result;
  
  arg1 = (TasGrid::TypeAcceleration)(*farg1);
  result = (bool)TasGrid::TasmanianSparseGrid::isAccelerationAvailable(arg1);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_setGPUID(SwigClassWrapper *farg1, int const *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::setGPUID(int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  (arg1)->setGPUID(arg2);
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getGPUID(SwigClassWrapper *farg1) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getGPUID() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->getGPUID();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getNumGPUs() {
  int fresult ;
  int result;
  
  result = (int)TasGrid::TasmanianSparseGrid::getNumGPUs();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_getGPUMemory(int const *farg1) {
  int fresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)(*farg1);
  result = (int)TasGrid::TasmanianSparseGrid::getGPUMemory(arg1);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TasmanianSparseGrid_getGPUName(int const *farg1) {
  SwigArrayWrapper fresult ;
  int arg1 ;
  std::string result;
  
  arg1 = (int)(*farg1);
  result = TasGrid::TasmanianSparseGrid::getGPUName(arg1);
  fresult.size = (&result)->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, (&result)->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TasmanianSparseGrid_getDomainInside(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  SwigValueWrapper< std::function< bool (std::vector< double > const &) > > result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getDomainInside() const", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = ((TasGrid::TasmanianSparseGrid const *)arg1)->getDomainInside();
  fresult.cptr = new (TasGrid::TasmanianSparseGrid::DomainInsideSignature)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_removePointsByHierarchicalCoefficient__SWIG_0(SwigClassWrapper *farg1, double const *farg2, int const *farg3, SwigClassWrapper *farg4) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::removePointsByHierarchicalCoefficient(double,int,double const *)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (double *)farg4->cptr;
  (arg1)->removePointsByHierarchicalCoefficient(arg2,arg3,(double const *)arg4);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_removePointsByHierarchicalCoefficient__SWIG_1(SwigClassWrapper *farg1, double const *farg2, int const *farg3) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  int arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::removePointsByHierarchicalCoefficient(double,int)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  arg3 = (int)(*farg3);
  (arg1)->removePointsByHierarchicalCoefficient(arg2,arg3);
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_removePointsByHierarchicalCoefficient__SWIG_2(SwigClassWrapper *farg1, double const *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double arg2 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::removePointsByHierarchicalCoefficient(double)", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double)(*farg2);
  (arg1)->removePointsByHierarchicalCoefficient(arg2);
}


SWIGEXPORT int _wrap_TasmanianSparseGrid_evaluateSparseHierarchicalFunctionsGetNZ(SwigClassWrapper *farg1, double *farg2, int const *farg3) {
  int fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctionsGetNZ(double const [],int) const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (int)(*farg3);
  result = (int)((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateSparseHierarchicalFunctionsGetNZ((double const (*))arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_evaluateSparseHierarchicalFunctionsStatic(SwigClassWrapper *farg1, double *farg2, int const *farg3, SwigClassWrapper *farg4, SwigClassWrapper *farg5, double *farg6) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  double *arg2 ;
  int arg3 ;
  int *arg4 ;
  int *arg5 ;
  double *arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::evaluateSparseHierarchicalFunctionsStatic(double const [],int,int [],int [],double []) const", return );
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (int)(*farg3);
  arg4 = (int *)farg4->cptr;
  arg5 = (int *)farg5->cptr;
  arg6 = (double *)(farg6);
  ((TasGrid::TasmanianSparseGrid const *)arg1)->evaluateSparseHierarchicalFunctionsStatic((double const (*))arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT int * _wrap_TasmanianSparseGrid_getPointsIndexes(SwigClassWrapper *farg1) {
  int * fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getPointsIndexes() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int *)((TasGrid::TasmanianSparseGrid const *)arg1)->getPointsIndexes();
  fresult = result;
  return fresult;
}


SWIGEXPORT int * _wrap_TasmanianSparseGrid_getNeededIndexes(SwigClassWrapper *farg1) {
  int * fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  int *result = 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const *", "TasmanianSparseGrid", "TasGrid::TasmanianSparseGrid::getNeededIndexes() const", return 0);
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = (int *)((TasGrid::TasmanianSparseGrid const *)arg1)->getNeededIndexes();
  fresult = result;
  return fresult;
}


SWIGEXPORT void _wrap_TasmanianSparseGrid_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  TasGrid::TasmanianSparseGrid *arg1 = (TasGrid::TasmanianSparseGrid *) 0 ;
  TasGrid::TasmanianSparseGrid *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<TasGrid::TasmanianSparseGrid, SWIGPOLICY_TasGrid_TasmanianSparseGrid>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_makeEmpty() {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid result;
  
  result = TasGrid::makeEmpty();
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeGlobalGrid__SWIG_0(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6, double const *farg7, double const *farg8, SwigArrayWrapper *farg9, SwigClassWrapper *farg10) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  double arg7 ;
  double arg8 ;
  char *arg9 = (char *) 0 ;
  std::vector< int > *arg10 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  arg7 = (double)(*farg7);
  arg8 = (double)(*farg8);
  arg9 = (char *)(farg9->data);
  SWIG_check_nonnull(farg10->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg10 = (std::vector< int > *)farg10->cptr;
  result = TasGrid::makeGlobalGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6,arg7,arg8,(char const *)arg9,(std::vector< int > const &)*arg10);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeGlobalGrid__SWIG_1(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6, double const *farg7, double const *farg8, SwigArrayWrapper *farg9) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  double arg7 ;
  double arg8 ;
  char *arg9 = (char *) 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double,char const *)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  arg7 = (double)(*farg7);
  arg8 = (double)(*farg8);
  arg9 = (char *)(farg9->data);
  result = TasGrid::makeGlobalGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6,arg7,arg8,(char const *)arg9);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeGlobalGrid__SWIG_2(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6, double const *farg7, double const *farg8) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  double arg7 ;
  double arg8 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double,double)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  arg7 = (double)(*farg7);
  arg8 = (double)(*farg8);
  result = TasGrid::makeGlobalGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6,arg7,arg8);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeGlobalGrid__SWIG_3(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6, double const *farg7) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  double arg7 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,double)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  arg7 = (double)(*farg7);
  result = TasGrid::makeGlobalGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6,arg7);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeGlobalGrid__SWIG_4(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeGlobalGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  result = TasGrid::makeGlobalGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeGlobalGrid__SWIG_5(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  result = TasGrid::makeGlobalGrid(arg1,arg2,arg3,arg4,arg5);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeSequenceGrid__SWIG_0(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6, SwigClassWrapper *farg7) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  std::vector< int > *arg7 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  SWIG_check_nonnull(farg7->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg7 = (std::vector< int > *)farg7->cptr;
  result = TasGrid::makeSequenceGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6,(std::vector< int > const &)*arg7);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeSequenceGrid__SWIG_1(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeSequenceGrid(int,int,int,TasGrid::TypeDepth,TasGrid::TypeOneDRule,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  result = TasGrid::makeSequenceGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeSequenceGrid__SWIG_2(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  result = TasGrid::makeSequenceGrid(arg1,arg2,arg3,arg4,arg5);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeLocalPolynomialGrid__SWIG_0(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, SwigClassWrapper *farg6) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  std::vector< int > *arg6 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeLocalPolynomialGrid(int,int,int,int,TasGrid::TypeOneDRule,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  result = TasGrid::makeLocalPolynomialGrid(arg1,arg2,arg3,arg4,arg5,(std::vector< int > const &)*arg6);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeLocalPolynomialGrid__SWIG_1(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TypeOneDRule arg5 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (TasGrid::TypeOneDRule)(*farg5);
  result = TasGrid::makeLocalPolynomialGrid(arg1,arg2,arg3,arg4,arg5);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeLocalPolynomialGrid__SWIG_2(int const *farg1, int const *farg2, int const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  result = TasGrid::makeLocalPolynomialGrid(arg1,arg2,arg3,arg4);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeLocalPolynomialGrid__SWIG_3(int const *farg1, int const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  result = TasGrid::makeLocalPolynomialGrid(arg1,arg2,arg3);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeWaveletGrid__SWIG_0(int const *farg1, int const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeWaveletGrid(int,int,int,int,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg5 = (std::vector< int > *)farg5->cptr;
  result = TasGrid::makeWaveletGrid(arg1,arg2,arg3,arg4,(std::vector< int > const &)*arg5);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeWaveletGrid__SWIG_1(int const *farg1, int const *farg2, int const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  result = TasGrid::makeWaveletGrid(arg1,arg2,arg3,arg4);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeWaveletGrid__SWIG_2(int const *farg1, int const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  result = TasGrid::makeWaveletGrid(arg1,arg2,arg3);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeFourierGrid__SWIG_0(int const *farg1, int const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5, SwigClassWrapper *farg6) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< int > *arg6 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg5 = (std::vector< int > *)farg5->cptr;
  SWIG_check_nonnull(farg6->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg6 = (std::vector< int > *)farg6->cptr;
  result = TasGrid::makeFourierGrid(arg1,arg2,arg3,arg4,(std::vector< int > const &)*arg5,(std::vector< int > const &)*arg6);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeFourierGrid__SWIG_1(int const *farg1, int const *farg2, int const *farg3, int const *farg4, SwigClassWrapper *farg5) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  std::vector< int > *arg5 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  SWIG_check_nonnull(farg5->cptr, "std::vector< int > const &", "VecInt", "TasGrid::makeFourierGrid(int,int,int,TasGrid::TypeDepth,std::vector< int > const &)", return SwigClassWrapper_uninitialized());
  arg5 = (std::vector< int > *)farg5->cptr;
  result = TasGrid::makeFourierGrid(arg1,arg2,arg3,arg4,(std::vector< int > const &)*arg5);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_makeFourierGrid__SWIG_2(int const *farg1, int const *farg2, int const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TypeDepth arg4 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (TasGrid::TypeDepth)(*farg4);
  result = TasGrid::makeFourierGrid(arg1,arg2,arg3,arg4);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_readGrid__SWIG_0(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  char *arg1 = (char *) 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  arg1 = (char *)(farg1->data);
  result = TasGrid::readGrid((char const *)arg1);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_readGrid__SWIG_1(SwigArrayWrapper *farg1) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  std::string tempstr1 ;
  TasGrid::TasmanianSparseGrid result;
  
  tempstr1 = std::string(static_cast<char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  result = TasGrid::readGrid((std::string const &)*arg1);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_copyGrid__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  TasGrid::TasmanianSparseGrid result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const &", "TasmanianSparseGrid", "TasGrid::copyGrid(TasGrid::TasmanianSparseGrid const &,int,int)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  result = TasGrid::copyGrid((TasGrid::TasmanianSparseGrid const &)*arg1,arg2,arg3);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_copyGrid__SWIG_1(SwigClassWrapper *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = 0 ;
  int arg2 ;
  TasGrid::TasmanianSparseGrid result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const &", "TasmanianSparseGrid", "TasGrid::copyGrid(TasGrid::TasmanianSparseGrid const &,int)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  arg2 = (int)(*farg2);
  result = TasGrid::copyGrid((TasGrid::TasmanianSparseGrid const &)*arg1,arg2);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_copyGrid__SWIG_2(SwigClassWrapper *farg1) {
  SwigClassWrapper fresult ;
  TasGrid::TasmanianSparseGrid *arg1 = 0 ;
  TasGrid::TasmanianSparseGrid result;
  
  SWIG_check_nonnull(farg1->cptr, "TasGrid::TasmanianSparseGrid const &", "TasmanianSparseGrid", "TasGrid::copyGrid(TasGrid::TasmanianSparseGrid const &)", return SwigClassWrapper_uninitialized());
  arg1 = (TasGrid::TasmanianSparseGrid *)farg1->cptr;
  result = TasGrid::copyGrid((TasGrid::TasmanianSparseGrid const &)*arg1);
  fresult.cptr = new (TasGrid::TasmanianSparseGrid)(result);
  fresult.cmemflags = SWIG_MEM_RVALUE | SWIG_MEM_OWN;
  return fresult;
}


} // extern

